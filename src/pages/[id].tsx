import Head from 'next/head'
import { useState, useEffect } from 'react'
import { useRouter, NextRouter } from 'next/router'
import capitalise from '@/components/lib/capitalise'
import Header from '@/components/Header'
import Container from '@/components/Container'
import Card from '@/components/cards/Card'
import Image from 'next/image'
import Loading from '@/components/Loading'
import type { SinglePokemon } from '@/components/lib/types'
import Error from '@/components/Error'

export default function SinglePokemon() {
  const router: NextRouter = useRouter()
  const id = router.query.id as string
  const [loading, setLoading] = useState<boolean>()
  const [pokemon, setPokemon] = useState<undefined | SinglePokemon>(undefined)
  const [err, setErr] = useState<boolean>(false)

  const divAlignClass: string =
    'flex flex-wrap p-3 w-full gap-2 place-content-around [&>*]:px-4 &>*]:text-md &>*]:text-left &>*]:md:text-center'

  const h3Class: string =
    'font-semibold text-2xl rounded-t w-full flex justify-center items-center p-3 gap-3 bg-black/[0.8] text-white'

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true)
        setErr(false)
        const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)
        if (!res.ok) {
          setErr(true)
          setLoading(false)
          return
        } else {
          const jsonData = await res.json()
          setPokemon(jsonData)
          setLoading(false)
        }
      } catch (error) {
        setLoading(false)
        setErr(true)
      }
    }
    if (id) fetchData()
  }, [id])

  if (loading) return <Loading />
  if (err)
    return (
      <div className="h-screen w-screen flex items-center justify-center">
        <Error text={`Error. Looks like that pokémon can't be found!`} />
      </div>
    )

  if (pokemon) {
    return (
      <>
        <Head>
          <title>Pokédex 2023 | {capitalise(pokemon?.name)}</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Header>
          <h1 className="text-3xl">{`${capitalise(pokemon.name)} | #${pokemon.id
            .toString()
            .padStart(3, '0')}`}</h1>
        </Header>
        <main className="flex flex-col items-center h-full justify-center">
          <Container className="gap-3 my-6">
            <Card padding>
              <div className="flex flex-wrap w-full gap-2 place-content-around">
                <Image
                  src={pokemon.sprites.front_default}
                  width={200}
                  height={150}
                  alt={`An image of the pokemon ${pokemon.name}`}
                  className={'hover:scale-150 duration-300 ease-in-out'}
                />
                {pokemon.sprites.back_default && (
                  <Image
                    src={pokemon.sprites.back_default}
                    width={200}
                    height={150}
                    alt={`An image of the pokemon ${pokemon.name}`}
                    className={'hover:scale-150 duration-300 ease-in-out'}
                  />
                )}
              </div>
            </Card>
            <div className="w-full flex flex-col lg:flex-row gap-3">
              <Card className="gap-3">
                <h3 className={h3Class}>Details</h3>
                <div className={divAlignClass}>
                  <p>
                    <span className="font-semibold">Weight: </span>
                    {pokemon.weight}
                  </p>
                  <p>
                    <span className="font-semibold">Height: </span>
                    {pokemon.height}
                  </p>
                </div>
              </Card>

              <Card className="gap-3">
                <h3 className={h3Class}>Stats</h3>
                <div className={divAlignClass}>
                  <p>
                    <span className="font-semibold">HP: </span>
                    {pokemon.stats[0].base_stat}
                  </p>
                  <p>
                    <span className="font-semibold">Speed: </span>
                    {pokemon.stats[5].base_stat}
                  </p>
                  <p>
                    <span className="font-semibold">Attack: </span>
                    {pokemon.stats[1].base_stat}
                  </p>
                  <p>
                    <span className="font-semibold">Defence: </span>
                    {pokemon.stats[2].base_stat}
                  </p>
                </div>
              </Card>
            </div>

            <div className="w-full flex flex-col lg:flex-row gap-3">
              <Card className="gap-3">
                <h3 className={h3Class}>Moves</h3>
                <div className={divAlignClass}>
                  {pokemon.moves[0] && (
                    <p>
                      {capitalise(pokemon.moves[0].move.name).replace('-', ' ')}
                    </p>
                  )}
                  {pokemon.moves[1] && (
                    <p>
                      {capitalise(pokemon.moves[1].move.name).replace('-', ' ')}
                    </p>
                  )}
                  {pokemon.moves[2] && (
                    <p>
                      {capitalise(pokemon.moves[2].move.name).replace('-', ' ')}
                    </p>
                  )}
                  {pokemon.moves[3] && (
                    <p>
                      {capitalise(pokemon.moves[3].move.name).replace('-', ' ')}
                    </p>
                  )}
                  {pokemon.moves[4] && (
                    <p>
                      {capitalise(pokemon.moves[4].move.name).replace('-', ' ')}
                    </p>
                  )}
                  {pokemon.moves[5] && (
                    <p>
                      {capitalise(pokemon.moves[5].move.name).replace('-', ' ')}
                    </p>
                  )}
                </div>
              </Card>

              <Card className="gap-3">
                <h3 className={h3Class}>Types</h3>
                <div className={`${divAlignClass} h-full`}>
                  <p>{capitalise(pokemon.types[0].type.name)}</p>
                  {pokemon.types[1] && (
                    <p>{capitalise(pokemon.types[1].type.name)}</p>
                  )}
                </div>
              </Card>
            </div>
          </Container>
        </main>
        <Paginate pokeId={pokemon.id} />
      </>
    )
  }
}

type PokeId = {
  pokeId: number
}

function Paginate({ pokeId }: PokeId) {
  const router: NextRouter = useRouter()
  const buttonStyle: string =
    'h-20 w-8 md:w-10 text-center flex justify-center items-center cursor-pointer duration-300 ease-in-out hover:w-20'
  return (
    <>
      {pokeId <= 150 && (
        <div
          id="next"
          className={`${buttonStyle} fixed top-1/2 right-0 hover:bg-poke-blue bg-poke-blue/[0.8] text-white rounded-l-lg`}
          onClick={() => router.push(`/${pokeId + 1}`)}
        >
          <p className="text-xl font-semibold">&#62;</p>
        </div>
      )}
      {pokeId >= 2 && (
        <div
          id="previous"
          className={`${buttonStyle} fixed top-1/2 left-0 hover:bg-poke-yellow bg-poke-yellow/[0.8] text-black rounded-r-lg`}
          onClick={() => router.push(`/${pokeId - 1}`)}
        >
          <p className="text-xl font-semibold">&#60;</p>
        </div>
      )}
    </>
  )
}
